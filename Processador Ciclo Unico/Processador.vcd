$date
	Sat Feb  8 13:56:14 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module SingleCycleMIPS_Simulation $end
$var wire 32 ! pc [31:0] $end
$var wire 32 " instruction [31:0] $end
$var wire 1 # RegWrite $end
$var wire 1 $ Jump $end
$var wire 1 % Branch $end
$var wire 1 & ALUSrc $end
$var reg 1 ' clk $end
$var reg 1 ( rst $end
$var integer 32 ) iterator [31:0] $end
$var integer 32 * iterator2 [31:0] $end
$scope module uut $end
$var wire 1 ' clk $end
$var wire 1 ( rst $end
$var wire 1 + zero $end
$var wire 5 , writeReg [4:0] $end
$var wire 32 - sign_ext_imm [31:0] $end
$var wire 32 . readData2 [31:0] $end
$var wire 32 / readData1 [31:0] $end
$var wire 32 0 pc [31:0] $end
$var wire 32 1 next_pc [31:0] $end
$var wire 32 2 mem_data [31:0] $end
$var wire 32 3 jump_address [31:0] $end
$var wire 32 4 instruction [31:0] $end
$var wire 32 5 alu_result [31:0] $end
$var wire 4 6 alu_control [3:0] $end
$var wire 1 # RegWrite $end
$var wire 1 7 RegDst $end
$var wire 1 8 MemtoReg $end
$var wire 1 9 MemWrite $end
$var wire 1 : MemRead $end
$var wire 1 $ Jump $end
$var wire 1 % Branch $end
$var wire 1 & ALUSrc $end
$var wire 2 ; ALUOp [1:0] $end
$scope module alu $end
$var wire 32 < input2 [31:0] $end
$var wire 32 = input1 [31:0] $end
$var wire 4 > ALUControl [3:0] $end
$var reg 32 ? result [31:0] $end
$var reg 1 + zero $end
$upscope $end
$scope module alu_ctrl $end
$var wire 6 @ funct [5:0] $end
$var wire 2 A ALUOp [1:0] $end
$var reg 4 B alu_control [3:0] $end
$upscope $end
$scope module control $end
$var wire 6 C opcode [5:0] $end
$var reg 2 D ALUOp [1:0] $end
$var reg 1 & ALUSrc $end
$var reg 1 % Branch $end
$var reg 1 $ Jump $end
$var reg 1 : MemRead $end
$var reg 1 9 MemWrite $end
$var reg 1 8 MemtoReg $end
$var reg 1 7 RegDst $end
$var reg 1 # RegWrite $end
$upscope $end
$scope module data_mem $end
$var wire 1 : MemRead $end
$var wire 1 9 MemWrite $end
$var wire 32 E address [31:0] $end
$var wire 1 ' clk $end
$var wire 32 F writeData [31:0] $end
$var wire 32 G readData [31:0] $end
$upscope $end
$scope module inst_mem $end
$var wire 32 H instruction [31:0] $end
$var wire 32 I address [31:0] $end
$upscope $end
$scope module pc_reg $end
$var wire 1 ' clk $end
$var wire 32 J next_pc [31:0] $end
$var wire 1 ( rst $end
$var reg 32 K pc [31:0] $end
$upscope $end
$scope module reg_file $end
$var wire 1 # RegWrite $end
$var wire 1 ' clk $end
$var wire 32 L readData1 [31:0] $end
$var wire 32 M readData2 [31:0] $end
$var wire 5 N readReg1 [4:0] $end
$var wire 5 O readReg2 [4:0] $end
$var wire 32 P writeData [31:0] $end
$var wire 5 Q writeReg [4:0] $end
$var integer 32 R i [31:0] $end
$upscope $end
$scope module sign_ext $end
$var wire 16 S in [15:0] $end
$var wire 32 T out [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module SingleCycleMIPS_Simulation $end
$var reg 32 U \regBankState[0] [31:0] $end
$upscope $end
$scope module SingleCycleMIPS_Simulation $end
$var reg 32 V \regBankState[1] [31:0] $end
$upscope $end
$scope module SingleCycleMIPS_Simulation $end
$var reg 32 W \regBankState[2] [31:0] $end
$upscope $end
$scope module SingleCycleMIPS_Simulation $end
$var reg 32 X \regBankState[3] [31:0] $end
$upscope $end
$scope module SingleCycleMIPS_Simulation $end
$var reg 32 Y \regBankState[4] [31:0] $end
$upscope $end
$scope module SingleCycleMIPS_Simulation $end
$var reg 32 Z \regBankState[5] [31:0] $end
$upscope $end
$scope module SingleCycleMIPS_Simulation $end
$var reg 32 [ \regBankState[6] [31:0] $end
$upscope $end
$scope module SingleCycleMIPS_Simulation $end
$var reg 32 \ \regBankState[7] [31:0] $end
$upscope $end
$scope module SingleCycleMIPS_Simulation $end
$var reg 32 ] \regBankState[8] [31:0] $end
$upscope $end
$scope module SingleCycleMIPS_Simulation $end
$var reg 32 ^ \regBankState[9] [31:0] $end
$upscope $end
$scope module SingleCycleMIPS_Simulation $end
$var reg 32 _ \regBankState[10] [31:0] $end
$upscope $end
$scope module SingleCycleMIPS_Simulation $end
$var reg 32 ` \regBankState[11] [31:0] $end
$upscope $end
$scope module SingleCycleMIPS_Simulation $end
$var reg 32 a \regBankState[12] [31:0] $end
$upscope $end
$scope module SingleCycleMIPS_Simulation $end
$var reg 32 b \regBankState[13] [31:0] $end
$upscope $end
$scope module SingleCycleMIPS_Simulation $end
$var reg 32 c \regBankState[14] [31:0] $end
$upscope $end
$scope module SingleCycleMIPS_Simulation $end
$var reg 32 d \regBankState[15] [31:0] $end
$upscope $end
$scope module SingleCycleMIPS_Simulation $end
$var reg 32 e \regBankState[16] [31:0] $end
$upscope $end
$scope module SingleCycleMIPS_Simulation $end
$var reg 32 f \regBankState[17] [31:0] $end
$upscope $end
$scope module SingleCycleMIPS_Simulation $end
$var reg 32 g \regBankState[18] [31:0] $end
$upscope $end
$scope module SingleCycleMIPS_Simulation $end
$var reg 32 h \regBankState[19] [31:0] $end
$upscope $end
$scope module SingleCycleMIPS_Simulation $end
$var reg 32 i \regBankState[20] [31:0] $end
$upscope $end
$scope module SingleCycleMIPS_Simulation $end
$var reg 32 j \regBankState[21] [31:0] $end
$upscope $end
$scope module SingleCycleMIPS_Simulation $end
$var reg 32 k \regBankState[22] [31:0] $end
$upscope $end
$scope module SingleCycleMIPS_Simulation $end
$var reg 32 l \regBankState[23] [31:0] $end
$upscope $end
$scope module SingleCycleMIPS_Simulation $end
$var reg 32 m \regBankState[24] [31:0] $end
$upscope $end
$scope module SingleCycleMIPS_Simulation $end
$var reg 32 n \regBankState[25] [31:0] $end
$upscope $end
$scope module SingleCycleMIPS_Simulation $end
$var reg 32 o \regBankState[26] [31:0] $end
$upscope $end
$scope module SingleCycleMIPS_Simulation $end
$var reg 32 p \regBankState[27] [31:0] $end
$upscope $end
$scope module SingleCycleMIPS_Simulation $end
$var reg 32 q \regBankState[28] [31:0] $end
$upscope $end
$scope module SingleCycleMIPS_Simulation $end
$var reg 32 r \regBankState[29] [31:0] $end
$upscope $end
$scope module SingleCycleMIPS_Simulation $end
$var reg 32 s \regBankState[30] [31:0] $end
$upscope $end
$scope module SingleCycleMIPS_Simulation $end
$var reg 32 t \regBankState[31] [31:0] $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#10000
$dumpvars
bx t
bx s
bx r
bx q
bx p
bx o
bx n
bx m
bx l
bx k
bx j
bx i
bx h
bx g
bx f
bx e
bx d
bx c
bx b
bx a
bx `
bx _
bx ^
bx ]
bx \
bx [
bx Z
bx Y
bx X
bx W
bx V
bx U
b1010 T
b1010 S
b100000 R
b1001 Q
b1010 P
b1001 O
b0 N
b0 M
b0 L
b0 K
b100 J
b0 I
b100000000010010000000000001010 H
b0 G
b0 F
b1010 E
b0 D
b1000 C
b10 B
b0 A
b1010 @
b1010 ?
b10 >
b0 =
b1010 <
b0 ;
0:
09
08
07
b10 6
b1010 5
b100000000010010000000000001010 4
b1001000000000000101000 3
b0 2
b100 1
b0 0
b0 /
b0 .
b1010 -
b1001 ,
0+
b100000 *
bx )
0(
0'
1&
0%
0$
1#
b100000000010010000000000001010 "
b0 !
$end
#15000
b101 P
b101 5
b101 ?
b101 E
b1000 ,
b1000 Q
b101 <
b1000000000000000010100 3
b101 @
b101 -
b101 T
b101 S
b1000 O
b1000 1
b1000 J
b100000000010000000000000000101 "
b100000000010000000000000000101 4
b100000000010000000000000000101 H
b0 .
b0 F
b0 M
b100 !
b100 0
b100 I
b100 K
b0 t
b0 s
b0 r
b0 q
b0 p
b0 o
b0 n
b0 m
b0 l
b0 k
b0 j
b0 i
b0 h
b0 g
b0 f
b0 e
b0 d
b0 c
b0 b
b0 a
b0 `
b0 _
b0 ^
b0 ]
b0 \
b0 [
b0 Z
b0 Y
b0 X
b0 W
b0 V
b0 U
b100000 )
1'
#20000
0'
#25000
b1111 P
b1010 ,
b1010 Q
b1111 5
b1111 ?
b1111 E
b10 ;
b10 A
b10 D
0&
17
b100101000010100000010000000 3
b100000 @
b101000000100000 -
b101000000100000 T
b101000000100000 S
b1010 /
b1010 =
b1010 L
b1001 N
b0 C
b1100 1
b1100 J
b1001010000101000000100000 "
b1001010000101000000100000 4
b1001010000101000000100000 H
b101 .
b101 F
b101 M
b1000 !
b1000 0
b1000 I
b1000 K
b0 t
b0 s
b0 r
b0 q
b0 p
b0 o
b0 n
b0 m
b0 l
b0 k
b0 j
b0 i
b0 h
b0 g
b0 f
b0 e
b0 d
b0 c
b0 b
b0 a
b0 `
b0 _
b1010 ^
b0 ]
b0 \
b0 [
b0 Z
b0 Y
b0 X
b0 W
b0 V
b0 U
b100000 )
1'
#30000
0'
#35000
1+
b0 P
b0 ,
b0 Q
b0 6
b0 >
b0 B
b0 <
b0 5
b0 ?
b0 E
b0 3
b0 @
b0 -
b0 T
b0 S
b0 .
b0 F
b0 M
b0 O
b0 /
b0 =
b0 L
b0 N
b10000 1
b10000 J
b0 "
b0 4
b0 H
b1100 !
b1100 0
b1100 I
b1100 K
b0 t
b0 s
b0 r
b0 q
b0 p
b0 o
b0 n
b0 m
b0 l
b0 k
b0 j
b0 i
b0 h
b0 g
b0 f
b0 e
b0 d
b0 c
b0 b
b0 a
b0 `
b0 _
b1010 ^
b101 ]
b0 \
b0 [
b0 Z
b0 Y
b0 X
b0 W
b0 V
b0 U
b100000 )
1'
#40000
0'
#45000
b10100 1
b10100 J
b10000 !
b10000 0
b10000 I
b10000 K
b0 t
b0 s
b0 r
b0 q
b0 p
b0 o
b0 n
b0 m
b0 l
b0 k
b0 j
b0 i
b0 h
b0 g
b0 f
b0 e
b0 d
b0 c
b0 b
b0 a
b0 `
b1111 _
b1010 ^
b101 ]
b0 \
b0 [
b0 Z
b0 Y
b0 X
b0 W
b0 V
b0 U
b100000 )
1'
#50000
0'
#55000
b11000 1
b11000 J
b10100 !
b10100 0
b10100 I
b10100 K
b0 t
b0 s
b0 r
b0 q
b0 p
b0 o
b0 n
b0 m
b0 l
b0 k
b0 j
b0 i
b0 h
b0 g
b0 f
b0 e
b0 d
b0 c
b0 b
b0 a
b0 `
b1111 _
b1010 ^
b101 ]
b0 \
b0 [
b0 Z
b0 Y
b0 X
b0 W
b0 V
b0 U
b100000 )
1'
#60000
0'
#65000
b11100 1
b11100 J
b11000 !
b11000 0
b11000 I
b11000 K
b0 t
b0 s
b0 r
b0 q
b0 p
b0 o
b0 n
b0 m
b0 l
b0 k
b0 j
b0 i
b0 h
b0 g
b0 f
b0 e
b0 d
b0 c
b0 b
b0 a
b0 `
b1111 _
b1010 ^
b101 ]
b0 \
b0 [
b0 Z
b0 Y
b0 X
b0 W
b0 V
b0 U
b100000 )
1'
#70000
0'
#75000
b100000 1
b100000 J
b11100 !
b11100 0
b11100 I
b11100 K
b0 t
b0 s
b0 r
b0 q
b0 p
b0 o
b0 n
b0 m
b0 l
b0 k
b0 j
b0 i
b0 h
b0 g
b0 f
b0 e
b0 d
b0 c
b0 b
b0 a
b0 `
b1111 _
b1010 ^
b101 ]
b0 \
b0 [
b0 Z
b0 Y
b0 X
b0 W
b0 V
b0 U
b100000 )
1'
#80000
0'
#85000
b100100 1
b100100 J
b100000 !
b100000 0
b100000 I
b100000 K
b0 t
b0 s
b0 r
b0 q
b0 p
b0 o
b0 n
b0 m
b0 l
b0 k
b0 j
b0 i
b0 h
b0 g
b0 f
b0 e
b0 d
b0 c
b0 b
b0 a
b0 `
b1111 _
b1010 ^
b101 ]
b0 \
b0 [
b0 Z
b0 Y
b0 X
b0 W
b0 V
b0 U
b100000 )
1'
#90000
0'
#95000
b101000 1
b101000 J
b100100 !
b100100 0
b100100 I
b100100 K
b0 t
b0 s
b0 r
b0 q
b0 p
b0 o
b0 n
b0 m
b0 l
b0 k
b0 j
b0 i
b0 h
b0 g
b0 f
b0 e
b0 d
b0 c
b0 b
b0 a
b0 `
b1111 _
b1010 ^
b101 ]
b0 \
b0 [
b0 Z
b0 Y
b0 X
b0 W
b0 V
b0 U
b100000 )
1'
#100000
0'
#105000
b101100 1
b101100 J
b101000 !
b101000 0
b101000 I
b101000 K
b0 t
b0 s
b0 r
b0 q
b0 p
b0 o
b0 n
b0 m
b0 l
b0 k
b0 j
b0 i
b0 h
b0 g
b0 f
b0 e
b0 d
b0 c
b0 b
b0 a
b0 `
b1111 _
b1010 ^
b101 ]
b0 \
b0 [
b0 Z
b0 Y
b0 X
b0 W
b0 V
b0 U
b100000 )
1'
#110000
0'
