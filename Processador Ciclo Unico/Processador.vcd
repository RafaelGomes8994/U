$date
	Mon Feb  3 10:47:58 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module SingleCycleMIPS_Simulation $end
$scope module uut $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 1 # zero $end
$var wire 5 $ writeReg [4:0] $end
$var wire 32 % sign_ext_imm [31:0] $end
$var wire 32 & readData2 [31:0] $end
$var wire 32 ' readData1 [31:0] $end
$var wire 32 ( pc [31:0] $end
$var wire 32 ) next_pc [31:0] $end
$var wire 32 * mem_data [31:0] $end
$var wire 32 + jump_address [31:0] $end
$var wire 32 , instruction [31:0] $end
$var wire 32 - alu_result [31:0] $end
$var wire 4 . alu_control [3:0] $end
$var wire 1 / RegWrite $end
$var wire 1 0 RegDst $end
$var wire 1 1 MemtoReg $end
$var wire 1 2 MemWrite $end
$var wire 1 3 MemRead $end
$var wire 1 4 Jump $end
$var wire 1 5 Branch $end
$var wire 1 6 ALUSrc $end
$var wire 2 7 ALUOp [1:0] $end
$scope module alu $end
$var wire 32 8 input2 [31:0] $end
$var wire 32 9 input1 [31:0] $end
$var wire 4 : ALUControl [3:0] $end
$var reg 32 ; result [31:0] $end
$var reg 1 # zero $end
$upscope $end
$scope module alu_ctrl $end
$var wire 6 < funct [5:0] $end
$var wire 2 = ALUOp [1:0] $end
$var reg 4 > alu_control [3:0] $end
$upscope $end
$scope module control $end
$var wire 6 ? opcode [5:0] $end
$var reg 2 @ ALUOp [1:0] $end
$var reg 1 6 ALUSrc $end
$var reg 1 5 Branch $end
$var reg 1 4 Jump $end
$var reg 1 3 MemRead $end
$var reg 1 2 MemWrite $end
$var reg 1 1 MemtoReg $end
$var reg 1 0 RegDst $end
$var reg 1 / RegWrite $end
$upscope $end
$scope module data_mem $end
$var wire 1 3 MemRead $end
$var wire 1 2 MemWrite $end
$var wire 32 A address [31:0] $end
$var wire 1 ! clk $end
$var wire 32 B writeData [31:0] $end
$var wire 32 C readData [31:0] $end
$upscope $end
$scope module inst_mem $end
$var wire 32 D instruction [31:0] $end
$var wire 32 E address [31:0] $end
$upscope $end
$scope module pc_reg $end
$var wire 1 ! clk $end
$var wire 32 F next_pc [31:0] $end
$var wire 1 " rst $end
$var reg 32 G pc [31:0] $end
$upscope $end
$scope module reg_file $end
$var wire 1 / RegWrite $end
$var wire 1 ! clk $end
$var wire 32 H readData1 [31:0] $end
$var wire 32 I readData2 [31:0] $end
$var wire 5 J readReg1 [4:0] $end
$var wire 5 K readReg2 [4:0] $end
$var wire 32 L writeData [31:0] $end
$var wire 5 M writeReg [4:0] $end
$var integer 32 N i [31:0] $end
$upscope $end
$scope module sign_ext $end
$var wire 16 O in [15:0] $end
$var wire 32 P out [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b1010 P
b1010 O
b100000 N
b0 M
b0 L
b0 K
b0 J
b0 I
b0 H
b0 G
b100 F
b0 E
b1010 D
b0 C
b0 B
b0 A
b10 @
b0 ?
b0 >
b10 =
b1010 <
b0 ;
b0 :
b0 9
b0 8
b10 7
06
05
04
03
02
01
10
1/
b0 .
b0 -
b1010 ,
b101000 +
b0 *
b100 )
b0 (
b0 '
b0 &
b1010 %
b0 $
1#
1"
0!
$end
#5000
1!
#10000
0!
0"
#15000
b0 +
b0 <
b0 %
b0 P
b0 O
b1000 )
b1000 F
b0 ,
b0 D
b100 (
b100 E
b100 G
1!
#20000
0!
#25000
b1100 )
b1100 F
b1000 (
b1000 E
b1000 G
1!
#30000
0!
#35000
b10000 )
b10000 F
b1100 (
b1100 E
b1100 G
1!
#40000
0!
#45000
b10100 )
b10100 F
b10000 (
b10000 E
b10000 G
1!
#50000
0!
#55000
b11000 )
b11000 F
b10100 (
b10100 E
b10100 G
1!
#60000
0!
#65000
b11100 )
b11100 F
b11000 (
b11000 E
b11000 G
1!
#70000
0!
#75000
b100000 )
b100000 F
b11100 (
b11100 E
b11100 G
1!
#80000
0!
#85000
b100100 )
b100100 F
b100000 (
b100000 E
b100000 G
1!
#90000
0!
#95000
b101000 )
b101000 F
b100100 (
b100100 E
b100100 G
1!
#100000
0!
#105000
b101100 )
b101100 F
b101000 (
b101000 E
b101000 G
1!
#110000
0!
#115000
b110000 )
b110000 F
b101100 (
b101100 E
b101100 G
1!
#120000
0!
#125000
b110100 )
b110100 F
b110000 (
b110000 E
b110000 G
1!
#130000
0!
#135000
b111000 )
b111000 F
b110100 (
b110100 E
b110100 G
1!
#140000
0!
#145000
b111100 )
b111100 F
b111000 (
b111000 E
b111000 G
1!
#150000
0!
#155000
b1000000 )
b1000000 F
b111100 (
b111100 E
b111100 G
1!
#160000
0!
#165000
b1000100 )
b1000100 F
b1000000 (
b1000000 E
b1000000 G
1!
#170000
0!
#175000
b1001000 )
b1001000 F
b1000100 (
b1000100 E
b1000100 G
1!
#180000
0!
#185000
b1001100 )
b1001100 F
b1001000 (
b1001000 E
b1001000 G
1!
#190000
0!
#195000
b1010000 )
b1010000 F
b1001100 (
b1001100 E
b1001100 G
1!
#200000
0!
#205000
b1010100 )
b1010100 F
b1010000 (
b1010000 E
b1010000 G
1!
#210000
0!
