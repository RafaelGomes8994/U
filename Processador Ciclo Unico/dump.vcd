$date
	Sat Feb  8 12:56:50 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module SingleCycleMIPS_Simulation $end
$var wire 32 ! pc [31:0] $end
$var wire 32 " instruction [31:0] $end
$var wire 1 # RegWrite $end
$var wire 1 $ Jump $end
$var wire 1 % Branch $end
$var wire 1 & ALUSrc $end
$var reg 1 ' clk $end
$var reg 1 ( rst $end
$scope module uut $end
$var wire 1 ' clk $end
$var wire 1 ( rst $end
$var wire 1 ) zero $end
$var wire 5 * writeReg [4:0] $end
$var wire 32 + sign_ext_imm [31:0] $end
$var wire 32 , readData2 [31:0] $end
$var wire 32 - readData1 [31:0] $end
$var wire 32 . pc [31:0] $end
$var wire 32 / next_pc [31:0] $end
$var wire 32 0 mem_data [31:0] $end
$var wire 32 1 jump_address [31:0] $end
$var wire 32 2 instruction [31:0] $end
$var wire 32 3 alu_result [31:0] $end
$var wire 4 4 alu_control [3:0] $end
$var wire 1 # RegWrite $end
$var wire 1 5 RegDst $end
$var wire 1 6 MemtoReg $end
$var wire 1 7 MemWrite $end
$var wire 1 8 MemRead $end
$var wire 1 $ Jump $end
$var wire 1 % Branch $end
$var wire 1 & ALUSrc $end
$var wire 2 9 ALUOp [1:0] $end
$scope module alu $end
$var wire 32 : input2 [31:0] $end
$var wire 32 ; input1 [31:0] $end
$var wire 4 < ALUControl [3:0] $end
$var reg 32 = result [31:0] $end
$var reg 1 ) zero $end
$upscope $end
$scope module alu_ctrl $end
$var wire 6 > funct [5:0] $end
$var wire 2 ? ALUOp [1:0] $end
$var reg 4 @ alu_control [3:0] $end
$upscope $end
$scope module control $end
$var wire 6 A opcode [5:0] $end
$var reg 2 B ALUOp [1:0] $end
$var reg 1 & ALUSrc $end
$var reg 1 % Branch $end
$var reg 1 $ Jump $end
$var reg 1 8 MemRead $end
$var reg 1 7 MemWrite $end
$var reg 1 6 MemtoReg $end
$var reg 1 5 RegDst $end
$var reg 1 # RegWrite $end
$upscope $end
$scope module data_mem $end
$var wire 1 8 MemRead $end
$var wire 1 7 MemWrite $end
$var wire 32 C address [31:0] $end
$var wire 1 ' clk $end
$var wire 32 D writeData [31:0] $end
$var wire 32 E readData [31:0] $end
$upscope $end
$scope module inst_mem $end
$var wire 32 F instruction [31:0] $end
$var wire 32 G address [31:0] $end
$upscope $end
$scope module pc_reg $end
$var wire 1 ' clk $end
$var wire 32 H next_pc [31:0] $end
$var wire 1 ( rst $end
$var reg 32 I pc [31:0] $end
$upscope $end
$scope module reg_file $end
$var wire 1 # RegWrite $end
$var wire 1 ' clk $end
$var wire 32 J readData1 [31:0] $end
$var wire 32 K readData2 [31:0] $end
$var wire 5 L readReg1 [4:0] $end
$var wire 5 M readReg2 [4:0] $end
$var wire 32 N writeData [31:0] $end
$var wire 5 O writeReg [4:0] $end
$var integer 32 P i [31:0] $end
$upscope $end
$scope module sign_ext $end
$var wire 16 Q in [15:0] $end
$var wire 32 R out [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b101 R
b101 Q
b100000 P
b1000 O
b0 N
b1000 M
b0 L
b0 K
b0 J
b0 I
b100 H
b0 G
b100100000010000000000000000101 F
b0 E
b0 D
b0 C
b0 B
b1001 A
b10 @
b0 ?
b101 >
b0 =
b10 <
b0 ;
b0 :
b0 9
08
07
06
05
b10 4
b0 3
b100100000010000000000000000101 2
b1000000000000000010100 1
b0 0
b100 /
b0 .
b0 -
b0 ,
b101 +
b1000 *
1)
1(
0'
0&
0%
0$
0#
b100100000010000000000000000101 "
b0 !
$end
#5000
1'
#10000
0'
0(
#15000
b1011 *
b1011 O
b1011000000000001010000 1
b10100 >
b10100 +
b10100 R
b10100 Q
b1011 M
b1000 /
b1000 H
b100100000010110000000000010100 "
b100100000010110000000000010100 2
b100100000010110000000000010100 F
b100 !
b100 .
b100 G
b100 I
1'
#20000
0'
#25000
b0 *
b0 O
b0 4
b0 <
b0 @
b10 9
b10 ?
b10 B
1#
15
b101101010000000000001101000 1
b11010 >
b11010 +
b11010 R
b11010 Q
b1010 M
b1011 L
b0 A
b1100 /
b1100 H
b1011010100000000000011010 "
b1011010100000000000011010 2
b1011010100000000000011010 F
b1000 !
b1000 .
b1000 G
b1000 I
1'
#30000
0'
#35000
b10000 *
b10000 O
b1 4
b1 <
b1 @
b101001011100000000010010100 1
b100101 >
b11111111111111111000000000100101 +
b11111111111111111000000000100101 R
b1000000000100101 Q
b1011 M
b1010 L
b10000 /
b10000 H
b1010010111000000000100101 "
b1010010111000000000100101 2
b1010010111000000000100101 F
b1100 !
b1100 .
b1100 G
b1100 I
1'
#40000
0'
#45000
b10100 *
b10100 O
b0 4
b0 <
b0 @
b1011101000001000001000 1
b10 >
b11111111111111111010000010000010 +
b11111111111111111010000010000010 R
b1010000010000010 Q
b0 L
b10100 /
b10100 H
b10111010000010000010 "
b10111010000010000010 2
b10111010000010000010 F
b10000 !
b10000 .
b10000 G
b10000 I
1'
#50000
0'
#55000
bx 0
bx E
bx N
b10110 *
b10110 O
b10 4
b10 <
b10 @
b0 9
b0 ?
b0 B
18
16
1&
05
b100110110000000000000000000 1
b0 >
b0 +
b0 R
b0 Q
b10110 M
b1001 L
b100011 A
b11000 /
b11000 H
b10001101001101100000000000000000 "
b10001101001101100000000000000000 2
b10001101001101100000000000000000 F
b10100 !
b10100 .
b10100 G
b10100 I
1'
#60000
0'
#65000
b0 0
b0 E
b0 N
b10 *
b10 O
08
0#
06
0&
b10000000000000010000 1
b100 >
b100 +
b100 R
b100 Q
b10 M
b0 L
b1001 A
b11100 /
b11100 H
b100100000000100000000000000100 "
b100100000000100000000000000100 2
b100100000000100000000000000100 F
b0 ,
b0 D
b0 K
b11000 !
b11000 .
b11000 G
b11000 I
1'
#70000
0'
#75000
b10000 *
b10000 O
1$
b10000000000000010000100 1
b100001 >
b100001 +
b100001 R
b100001 Q
b10000 M
b10 A
b10000000000000010000100 /
b10000000000000010000100 H
b1000000100000000000000100001 "
b1000000100000000000000100001 2
b1000000100000000000000100001 F
b11100 !
b11100 .
b11100 G
b11100 I
1'
#80000
0'
#85000
b10000000000000010001000 /
b10000000000000010001000 H
b0 *
b0 O
b0 4
b0 <
b0 @
b10 9
b10 ?
b10 B
0$
1#
15
b0 1
b0 >
b0 +
b0 R
b0 Q
b0 M
b0 A
b0 "
b0 2
b0 F
b10000000000000010000100 !
b10000000000000010000100 .
b10000000000000010000100 G
b10000000000000010000100 I
1'
#90000
0'
#95000
b10000000000000010001100 /
b10000000000000010001100 H
b10000000000000010001000 !
b10000000000000010001000 .
b10000000000000010001000 G
b10000000000000010001000 I
1'
#100000
0'
#105000
b10000000000000010010000 /
b10000000000000010010000 H
b10000000000000010001100 !
b10000000000000010001100 .
b10000000000000010001100 G
b10000000000000010001100 I
1'
#110000
0'
#115000
b10000000000000010010100 /
b10000000000000010010100 H
b10000000000000010010000 !
b10000000000000010010000 .
b10000000000000010010000 G
b10000000000000010010000 I
1'
#120000
0'
#125000
b10000000000000010011000 /
b10000000000000010011000 H
b10000000000000010010100 !
b10000000000000010010100 .
b10000000000000010010100 G
b10000000000000010010100 I
1'
#130000
0'
#135000
b10000000000000010011100 /
b10000000000000010011100 H
b10000000000000010011000 !
b10000000000000010011000 .
b10000000000000010011000 G
b10000000000000010011000 I
1'
#140000
0'
#145000
b10000000000000010100000 /
b10000000000000010100000 H
b10000000000000010011100 !
b10000000000000010011100 .
b10000000000000010011100 G
b10000000000000010011100 I
1'
#150000
0'
#155000
b10000000000000010100100 /
b10000000000000010100100 H
b10000000000000010100000 !
b10000000000000010100000 .
b10000000000000010100000 G
b10000000000000010100000 I
1'
#160000
0'
#165000
b10000000000000010101000 /
b10000000000000010101000 H
b10000000000000010100100 !
b10000000000000010100100 .
b10000000000000010100100 G
b10000000000000010100100 I
1'
#170000
0'
#175000
b10000000000000010101100 /
b10000000000000010101100 H
b10000000000000010101000 !
b10000000000000010101000 .
b10000000000000010101000 G
b10000000000000010101000 I
1'
#180000
0'
#185000
b10000000000000010110000 /
b10000000000000010110000 H
b10000000000000010101100 !
b10000000000000010101100 .
b10000000000000010101100 G
b10000000000000010101100 I
1'
#190000
0'
#195000
b10000000000000010110100 /
b10000000000000010110100 H
b10000000000000010110000 !
b10000000000000010110000 .
b10000000000000010110000 G
b10000000000000010110000 I
1'
#200000
0'
#205000
b10000000000000010111000 /
b10000000000000010111000 H
b10000000000000010110100 !
b10000000000000010110100 .
b10000000000000010110100 G
b10000000000000010110100 I
1'
#210000
0'
